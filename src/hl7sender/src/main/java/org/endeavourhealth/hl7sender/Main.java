package org.endeavourhealth.hl7sender;

import ca.uhn.hl7v2.DefaultHapiContext;
import ca.uhn.hl7v2.HapiContext;
import ca.uhn.hl7v2.app.ActiveInitiator;
import ca.uhn.hl7v2.app.Connection;
import ca.uhn.hl7v2.llp.LLPException;
import ca.uhn.hl7v2.model.Message;
import ca.uhn.hl7v2.util.Terser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;

/*
 Parameters:
    1   -Dhost          destination server
    2   -Dport          destination port
    3   -Dinputmsg      input/message file/directory
    4   -Dinputtype     input type
                            FILE        =   a directory
                            PSQL        =   PSQL export (see below)
                            HAPI        =   Use HAPI iterator (this should also work for message log files generated by Barts TIE)
    4   -Dauditfile     audit file
    5   -Drestart       restart = YES or NO. YES means finding last successful send in log file and not send messages in the input file prior to that message
    6   -Darchive       archive directory

 Example of processing all files in directory. Always set restart=NO (even when restarting) as processed files have been archived.
 -Dhost=localhost -Dport=8901 -Dinputmsg=E:\Programming_Endeavour\Testing\HL7SenderTest\inputdir  -Dinputtype=FILE  -Darchive=E:\Programming_Endeavour\Testing\HL7SenderTest\archive -Dauditfile=E:\Programming_Endeavour\Testing\HL7SenderTest\audit.log -Drestart=NO

 Export from PSQL: select inbound_payload from log.message where message_id >= 2 order by message_id asc \g postgresout.txt

 */
public class Main
{
    private static final Logger LOG = LoggerFactory.getLogger(Main.class);

    public static void main( String[] args ) throws Exception {
        String SUCCESS_LINE = "Message sent successfully:";
        String FAILURE_LINE = "Message sent failed:";
        String NEWLINE = "\r\n";
        Terser nextMsgTerser = null;
        Terser responseTerser = null;
        String lastSuccessSendMsgId = "";
        boolean skipMessages = false;
        String destServer = System.getProperty("host");
        String destPort = System.getProperty("port");
        String messageFileName = System.getProperty("inputmsg");
        String inputType = System.getProperty("inputtype");
        String auditFileName = System.getProperty("auditfile");
        String restart = System.getProperty("restart");
        String archiveDirName = System.getProperty("archive");

        LOG.info("Starting.....");

        LOG.info("Destination Server: " + destServer );
        if ((restart.compareTo("YES") != 0) && (restart.compareTo("NO") != 0)) {
            LOG.info("Restart paramater " + restart + " invalid");
            return;
        }

        if ((inputType.compareTo("FILE") != 0) && (inputType.compareTo("PSQL") != 0) && (inputType.compareTo("HAPI") != 0)) {
            LOG.info("Input file type paramater " + inputType + " invalid");
            return;
        }

        // Messsage file
        File inputMessages = new File(messageFileName);
        LOG.info("Inputmessages file getAbsolutePath()==>" + inputMessages.getAbsolutePath());

        if (!inputMessages.exists()) {
            LOG.info("Message file/directory " + messageFileName + " does not exist");
            return;
        } else {
            if (!inputMessages.isDirectory() && inputMessages.listFiles().length == 0) {
                LOG.info("No message files found in " + messageFileName);
                return;
            }
        }

        // Archive dir
        File archiveDir = null;
        if (archiveDirName != null && archiveDirName.length() > 0) {
            archiveDir = new File(archiveDirName);
            LOG.info("Archive file getAbsolutePath()==>" + archiveDir.getAbsolutePath());
            if (!archiveDir.exists() || archiveDir.isFile()) {
                LOG.info("Archive directory " + archiveDirName + " does not exist");
                return;
            }
        }

        // Confirm parameters
        LOG.info("Destination Server: " + destServer );
        LOG.info("Destination Port: " + destPort );
        LOG.info("Message File: " + messageFileName );
        LOG.info("Message File Type: " + inputType);
        LOG.info("Audit File: " + auditFileName );
        LOG.info("Restart (YES/NO): " + restart);
        LOG.info("Archive location: " + archiveDirName);

        // Audit file
        File auditFile = new File(auditFileName);
        if (auditFile.exists()) {
            if (restart.compareTo("YES") == 0) {
                LOG.info("Audit file " + auditFileName + " exists - appending");
                LOG.info("Looking for last successful send in audit log.....");
                FileInputStream fstream = new FileInputStream(auditFile);
                BufferedReader br = new BufferedReader(new InputStreamReader(fstream));
                String strLine;
                while ((strLine = br.readLine()) != null)   {
                    if (strLine.startsWith(SUCCESS_LINE)) {
                        lastSuccessSendMsgId = strLine.split(":")[1];
                        skipMessages = true;
                    }
                }
                br.close();
                fstream.close();
                LOG.info("..... Found:" + lastSuccessSendMsgId);
            } else {
                LOG.info("Audit file " + auditFileName + " exists - appending");
            }
        } else {
            if (restart.compareTo("YES") == 0) {
                LOG.info("Audit file " + auditFileName + " does not exist - cannot restart");
                return;
            } else {
                LOG.info("Audit file " + auditFileName + " does not exist - creating");
            }
        }
        FileWriter auditWriter = new FileWriter(auditFile, true);

        // Set up message feed
        AbstractMessageReader fileReader = null;
        if (inputType.compareTo("PSQL") == 0) {
            fileReader = new PSQLReader();
            fileReader.setInputMessages(inputMessages);
        } else {
            if (inputType.compareTo("HAPI") == 0) {
                fileReader = new HAPIReader();
                fileReader.setInputMessages(inputMessages);
            } else {
                if (inputType.compareTo("FILE") == 0) {
                    fileReader = new DirectoryReader();
                    fileReader.setInputMessages(inputMessages);
                    fileReader.setArchiveDir(archiveDir);
                }
            }
        }
        fileReader.prepare();

        // Create a HapiContext
        HapiContext context = new DefaultHapiContext();

        // Open connection to destination server
        boolean useTls = false;
        Connection conn = context.newClient(destServer, Integer.parseInt(destPort), useTls);
        ActiveInitiator ai = (ActiveInitiator) conn.getInitiator();

        LOG.info("Starting to send......");
        String currMSH10 = null;
        try {
            while (fileReader.hasNext()) {
                Message nextMsg = fileReader.next();
                nextMsgTerser = new Terser(nextMsg);
                currMSH10 = nextMsgTerser.get("/MSH-10");

                if (skipMessages && lastSuccessSendMsgId.compareTo(currMSH10) == 0) {
                    LOG.info("Skip message (for the last time):" + currMSH10);
                    skipMessages = false;
                } else {
                    if (!skipMessages) {
                        LOG.info("Sending message:" + currMSH10);
                        Message response = ai.sendAndReceive(nextMsg);
                        LOG.info("Sending successful (checking response):" + response.printStructure());
                        responseTerser = new Terser(response);
                        if ((responseTerser.get("/MSA-1").compareTo("AA") == 0) || (responseTerser.get("/MSA-1").compareTo("CA") == 0)) {
                            auditWriter.write(SUCCESS_LINE + currMSH10 + NEWLINE);
                            auditWriter.write("Acknowledgement:" + response.encode() + NEWLINE);
                            fileReader.postSend();
                        } else {
                            auditWriter.write(FAILURE_LINE + currMSH10 + NEWLINE);
                            auditWriter.write("Acknowledgement:" + response.encode() + NEWLINE);
                            return;
                        }
                    } else {
                        LOG.info("Skip message:" + currMSH10);
                    }
                }
            }

            LOG.info("......done");
        }
        catch (IOException e) {
            auditWriter.write(FAILURE_LINE + currMSH10 + NEWLINE);
            e.printStackTrace();
            conn.close();
            conn = null;
            throw new Exception(e);
        }
        catch (LLPException e) {
            e.printStackTrace();
            throw new Exception(e);
        }
        finally {
            fileReader.close();
            conn.close();
            auditWriter.flush();
            auditWriter.close();
        }
    }

}
