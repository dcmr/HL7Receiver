package org.endeavourhealth.hl7sender;

import ca.uhn.hl7v2.DefaultHapiContext;
import ca.uhn.hl7v2.HL7Exception;
import ca.uhn.hl7v2.HapiContext;
import ca.uhn.hl7v2.app.ActiveInitiator;
import ca.uhn.hl7v2.app.Connection;
import ca.uhn.hl7v2.llp.LLPException;
import ca.uhn.hl7v2.model.Message;
import ca.uhn.hl7v2.parser.PipeParser;
import ca.uhn.hl7v2.util.Hl7InputStreamMessageIterator;
import ca.uhn.hl7v2.util.Terser;
import ca.uhn.hl7v2.validation.impl.NoValidation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;

/*
 Parameters:
    1   destination server
    2   destination port
    3   input/message file
    4   input type
            BARTS       =   messsge sample file generated by BARTS TIE
            PSQL        =   PSQL export (see below)
            HAPI        =   Use HAPI iterator
    4   audit file
    5   restart = YES or NO. YES means finding last successful send in log file and not send messages in the input file prior to that message

 Export from PSQL: select inbound_payload from log.message where message_id >= 2 order by message_id asc \g postgresout.txt

 */
public class Main
{
    private static final Logger LOG = LoggerFactory.getLogger(Main.class);
    static Hl7InputStreamMessageIterator hapiIter;
    static BufferedReader psqlReader;
    static Message psqlReaderNextmsg = null;

    public static void main( String[] args ) throws Exception {
        Message nextMsg = null;
        Terser nextMsgTerser = null;
        Terser responseTerser = null;
        String SUCCESS_LINE = "Message sent successfully:";
        String FAILURE_LINE = "Message sent failed:";
        String NEWLINE = "\r\n";
        String lastSuccessSendMsgId = "";
        boolean skipMessages = false;
        String destServer = args[0];
        String destPort = args[1];
        String messageFileName = args[2];
        String inputType = args[3];
        String auditFileName = args[4];
        String restart = args[5].toUpperCase();

        LOG.info("Starting.....");

        if ((restart.compareTo("YES") != 0) && (restart.compareTo("NO") != 0)) {
            LOG.info("Restart paramater " + restart + " invalid");
            return;
        }

        if ((inputType.compareTo("BARTS") != 0) && (inputType.compareTo("PSQL") != 0) && (inputType.compareTo("HAPI") != 0)) {
            LOG.info("Input file type paramater " + inputType + " invalid");
            return;
        }

        // Messsage file
        File messageFile = new File(messageFileName);
        if (!messageFile.exists()) {
            LOG.info("Message file " + messageFileName + " does not exist");
            return;
        }

        // Confirm parameters
        LOG.info("Destination Server: " + destServer );
        LOG.info("Destination Port: " + destPort );
        LOG.info("Message File: " + messageFileName );
        LOG.info("Message File Type: " + inputType);
        LOG.info("Audit File: " + auditFileName );
        LOG.info("Restart (YES/NO): " + restart);

        // Audit file
        File auditFile = new File(auditFileName);
        if (auditFile.exists()) {
            if (restart.compareTo("YES") == 0) {
                LOG.info("Message file " + auditFileName + " exists - appending");
                LOG.info("Looking for last successful send in audit log.....");
                FileInputStream fstream = new FileInputStream(auditFile);
                BufferedReader br = new BufferedReader(new InputStreamReader(fstream));
                String strLine;
                while ((strLine = br.readLine()) != null)   {
                    if (strLine.startsWith(SUCCESS_LINE)) {
                        lastSuccessSendMsgId = strLine.split(":")[1];
                        skipMessages = true;
                    }
                }
                br.close();
                fstream.close();
                LOG.info("..... Found:" + lastSuccessSendMsgId);
            } else {
                LOG.info("Message file " + auditFileName + " exists - appending");
            }
        } else {
            if (restart.compareTo("YES") == 0) {
                LOG.info("Message file " + auditFileName + " does not exist - cannot restart");
                return;
            } else {
                LOG.info("Message file " + auditFileName + " does not exist - creating");
            }
        }
        FileWriter auditWriter = new FileWriter(auditFile, true);


        FileReader reader = new FileReader(messageFile);
        openInputReader(reader, inputType);

        // Create a HapiContext
        HapiContext context = new DefaultHapiContext();

        // Open connection to destination server
        boolean useTls = false;
        Connection conn = context.newClient(destServer, Integer.parseInt(destPort), useTls);
        ActiveInitiator ai = (ActiveInitiator) conn.getInitiator();

        LOG.info("Starting to send......");
        // Send messages
        try {
            while (hasNext(inputType)) {
                nextMsg = next(inputType);
                nextMsgTerser = new Terser(nextMsg);
                String currMSH10 = nextMsgTerser.get("/MSH-10");

                if (skipMessages && lastSuccessSendMsgId.compareTo(currMSH10) == 0) {
                    LOG.info("Skip message (for the last time):" + currMSH10);
                    skipMessages = false;
                } else {
                    if (!skipMessages) {
                        LOG.info("Sending message:" + currMSH10);
                        Message response = ai.sendAndReceive(nextMsg);
                        LOG.info("Sending successful (checking response)");
                        responseTerser = new Terser(response);
                        if ((responseTerser.get("/MSA-1").compareTo("AA") == 0) || (responseTerser.get("/MSA-1").compareTo("CA") == 0)) {
                            auditWriter.write(SUCCESS_LINE + currMSH10 + NEWLINE);
                            auditWriter.write("Acknowledgement:" + response.encode() + NEWLINE);
                        } else {
                            auditWriter.write(FAILURE_LINE + currMSH10 + NEWLINE);
                            auditWriter.write("Acknowledgement:" + response.encode() + NEWLINE);
                            return;
                        }
                    } else {
                        LOG.info("Skip message:" + currMSH10);
                    }
                }
            }

            LOG.info("......done");
        }
        catch (IOException e) {
            auditWriter.write(FAILURE_LINE + nextMsgTerser.get("/MSH-10" + NEWLINE));
            e.printStackTrace();
            conn.close();
            conn = null;
            throw new Exception(e);
        }
        catch (LLPException e) {
            e.printStackTrace();
            throw new Exception(e);
        }
        finally {
            reader.close();
            conn.close();
            conn = null;
            ai = null;
            auditWriter.flush();
            auditWriter.close();
        }
    }

    public static void openInputReader(FileReader reader, String inputType) throws IOException, HL7Exception {
        if (inputType.compareTo("PSQL") == 0) {
            psqlReader = new BufferedReader(reader);
            readNextPsqlMessage();
        } else {
            if (inputType.compareTo("BARTS") == 0) {
                hapiIter = new Hl7InputStreamMessageIterator(reader);
            } else {
                if (inputType.compareTo("HAPI") == 0) {
                    hapiIter = new Hl7InputStreamMessageIterator(reader);
                }
            }
        }
    }

    public static boolean hasNext(String inputType) {
        if (inputType.compareTo("PSQL") == 0) {
            return (psqlReaderNextmsg != null);
        } else {
            if (inputType.compareTo("BARTS") == 0) {
                return hapiIter.hasNext();
            } else {
                if (inputType.compareTo("HAPI") == 0) {
                    return hapiIter.hasNext();
                }
            }
        }
        return false;
    }

    public static Message next(String inputType) throws IOException, HL7Exception {
        Message ret = null;
        if (inputType.compareTo("PSQL") == 0) {
            ret = psqlReaderNextmsg;
            readNextPsqlMessage();
        } else {
            if (inputType.compareTo("BARTS") == 0) {
                ret = hapiIter.next();
            } else {
                if (inputType.compareTo("HAPI") == 0) {
                    ret = hapiIter.next();
                }
            }
        }
        return ret;
    }

    public static void readNextPsqlMessage() throws IOException, HL7Exception {
        psqlReaderNextmsg = null;
        String strLine;
        while ((strLine = psqlReader.readLine()) != null)   {
            //LOG.info("read line=>" + strLine);
            if (strLine.trim().startsWith("MSH")) {
                //LOG.info("Found msg=>" + strLine);
                String adjustedMsg = strLine.trim().replaceAll("\\\\r","\r\n");
                DefaultHapiContext ctx = new DefaultHapiContext();
                PipeParser pp = ctx.getPipeParser();
                pp.setValidationContext(new NoValidation());
                psqlReaderNextmsg = pp.parse(adjustedMsg);
            }
            if (psqlReaderNextmsg != null) {
                return;
            }
        }
    }

}
